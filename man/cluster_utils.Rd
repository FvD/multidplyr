% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cluster-utils.R
\name{cluster_utils}
\alias{cluster_utils}
\alias{cluster_assign}
\alias{cluster_assign_each}
\alias{cluster_copy}
\alias{cluster_get}
\alias{cluster_rm}
\alias{cluster_ls}
\alias{cluster_library}
\title{Cluster utitility functions}
\usage{
cluster_assign(cluster, name, expr)

cluster_assign_each(cluster, name, values)

cluster_copy(cluster, names, env = caller_env())

cluster_get(cluster, name)

cluster_rm(cluster, names)

cluster_ls(cluster)

cluster_library(cluster, packages)
}
\arguments{
\item{cluster}{Cluster to work on}

\item{name, names}{Name of variable or variables, as strings.}

\item{expr}{An expression to evaluate.}

\item{values}{A list of values, one for each worker.}

\item{env}{Environment in which to look for varibles to copy.}

\item{packages}{Character vector of packages to load}
}
\value{
All functions that modify the worker environment invisibly return
  the cluster so they can chain them together. The other functions return
  lists with with one element for each worker.
}
\description{
These functions provide useful helpers for performaning common operations.
}
\examples{
cl <- new_cluster(2)
cl \%>\%
  cluster_assign("x", runif(1)) \%>\%
  cluster_get("x")

# Inline the expression using !! if you want to compute it locally
cl \%>\%
  cluster_assign("y", !!runif(1)) \%>\%
  cluster_get("x")

cl \%>\%
  cluster_assign_each("z", list(3, 4)) \%>\%
  cluster_get("z")

cl \%>\% cluster_ls()

w <- 10
cluster_copy(cl, "w")

cl \%>\% cluster_rm(c("w", "x", "y", "z"))
cl \%>\% cluster_ls()

cl \%>\% cluster_call(search())

cl \%>\%
  cluster_library("magrittr") \%>\%
  cluster_call(search())
}
